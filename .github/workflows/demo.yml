name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}   #This file is in the repo. Specifies all the dependencies and its versions.
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{steps.publish.outputs.script-file}}   #Referencing the step output to set an output for the overall job.
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish             #Can be any
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'     #Sets an output in a step. Use 'script-file' as declared just  below 'outputs'.
        #run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file=::{}' ';'    #Alternate way. Will be deprecated.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
          # path: |               # Pipe character needed to list several files or paths.
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo ${{needs.build.outputs.script-file}}    #Needs contains outputs of all jobs defined.Here we pull outputs from the build job.
      - name: Deploy
        run: echo "Deploying..."
